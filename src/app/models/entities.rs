//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "entities")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub idta: i64,
    pub parent_id: Option<i64>,
    pub name: String,
    pub operational_state: i32,
    pub extra_json: Json,
    pub id_entity_type: i32,
    pub id_stage: i32,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Idta",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::entity_types::Entity",
        from = "Column::IdEntityType",
        to = "super::entity_types::Column::IdEntityType",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EntityTypes,
    #[sea_orm(
        belongs_to = "super::stages::Entity",
        from = "Column::IdStage",
        to = "super::stages::Column::IdStage",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Stages,
}

impl Related<super::entity_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EntityTypes.def()
    }
}

impl Related<super::stages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
